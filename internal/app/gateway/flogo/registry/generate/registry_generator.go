/*
Sniperkit-Bot
- Status: analyzed
*/

// This program generates a registry_gen.go to load known Flogo triggers and activities.

// +build ignore

package main

import (
	"fmt"
	"os"
	"strings"
	"text/template"
	"time"

	"github.com/sniperkit/snk.fork.tibcosoftware-mashling/internal/app/gateway/flogo/registry/actions"
	"github.com/sniperkit/snk.fork.tibcosoftware-mashling/internal/app/gateway/flogo/registry/activities"
	"github.com/sniperkit/snk.fork.tibcosoftware-mashling/internal/app/gateway/flogo/registry/triggers"
)

// Registeree contains details on the item to register for Flogo
type Registeree struct {
	PackageName string
	ImportPath  string
	AssetName   string
}

func main() {
	var activityList, triggerList, actionList []Registeree
	for _, tr := range triggers.AssetNames() {
		var ip string
		if strings.HasPrefix(tr, "vendor/") {
			ip = strings.Replace(tr, "vendor/", "", 1)
		} else {
			ip = "github.com/sniperkit/snk.fork.tibcosoftware-mashling/" + tr
		}
		ip = strings.Replace(ip, "/trigger.json", "", 1)
		pn := strings.Replace(tr, "/trigger.json", "", 1)
		pn = strings.Replace(pn, "/", "", -1)
		pn = strings.Replace(pn, ".", "", -1)
		pn = strings.Replace(pn, "-", "", -1)
		triggerList = append(triggerList, Registeree{ImportPath: ip, PackageName: pn, AssetName: tr})
	}
	for _, actv := range activities.AssetNames() {
		var ip string
		if strings.HasPrefix(actv, "vendor/") {
			ip = strings.Replace(actv, "vendor/", "", 1)
		} else {
			ip = "github.com/sniperkit/snk.fork.tibcosoftware-mashling/" + actv
		}
		ip = strings.Replace(ip, "/activity.json", "", 1)
		pn := strings.Replace(actv, "/activity.json", "", 1)
		pn = strings.Replace(pn, "/", "", -1)
		pn = strings.Replace(pn, ".", "", -1)
		pn = strings.Replace(pn, "-", "", -1)
		activityList = append(activityList, Registeree{ImportPath: ip, PackageName: pn, AssetName: actv})
	}
	for _, ac := range actions.AssetNames() {
		var ip string
		if strings.HasPrefix(ac, "vendor/") {
			ip = strings.Replace(ac, "vendor/", "", 1)
		} else {
			ip = "github.com/sniperkit/snk.fork.tibcosoftware-mashling/" + ac
		}
		ip = strings.Replace(ip, "/action.json", "", 1)
		pn := strings.Replace(ac, "/action.json", "", 1)
		pn = strings.Replace(pn, "/", "", -1)
		pn = strings.Replace(pn, ".", "", -1)
		pn = strings.Replace(pn, "-", "", -1)
		actionList = append(actionList, Registeree{ImportPath: ip, PackageName: pn, AssetName: ac})
	}
	registryGen := "registry/registry_gen.go"
	fmt.Printf("Generating %s...\n", registryGen)
	f, err := os.Create(registryGen)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error: %v\n", err)
		os.Exit(1)
	}
	defer f.Close()

	registryTemplate.Execute(f, struct {
		Timestamp  time.Time
		Activities []Registeree
		Triggers   []Registeree
		Actions    []Registeree
	}{
		Timestamp:  time.Now(),
		Activities: activityList,
		Triggers:   triggerList,
		Actions:    actionList,
	})
}

var registryTemplate = template.Must(template.New("").Parse(`// Package registry handles Flogo trigger and activity registration. DO NOT EDIT!! This file was auto-generated by mashling at
// {{ .Timestamp }}
package registry

import (
  "github.com/TIBCOSoftware/flogo-lib/core/activity"
  "github.com/TIBCOSoftware/flogo-lib/core/trigger"
	"github.com/sniperkit/snk.fork.tibcosoftware-mashling/internal/app/gateway/flogo/registry/activities"
	"github.com/sniperkit/snk.fork.tibcosoftware-mashling/internal/app/gateway/flogo/registry/triggers"
  {{- range .Triggers }}
  {{ .PackageName }} "{{.ImportPath}}"
  {{- end }}
  {{- range .Activities }}
  {{ .PackageName }} "{{.ImportPath}}"
  {{- end }}
	{{- range .Actions }}
	// Force {{.ImportPath}} to be loaded and init run.
  _ "{{.ImportPath}}"
  {{- end }}
)

// SupportedImports contains all Flogo imports supported in the code base.
var SupportedImports map[string]bool

// init registers the triggers and activities.
func init(){
	err := RegisterUniverse()
	if err != nil {
		panic(err.Error())
	}
}

// RegisterUniverse registers all the activities and triggers that we know how to handle.
func RegisterUniverse() error {
	SupportedImports = make(map[string]bool)
  var err error
  // Register triggers
  var tr []byte
	var trmd *trigger.Metadata
  {{- range .Triggers }}
  // Register {{.ImportPath}}
	SupportedImports["{{.ImportPath}}"] = true
  tr, err = triggers.Asset("{{.AssetName}}")
  if err != nil {
  	// Asset was not found.
    return err
  }
  trmd = trigger.NewMetadata(string(tr))
  trigger.RegisterFactory(trmd.ID, {{.PackageName}}.NewFactory(trmd))
  {{- end }}

  // Register activities
  var act []byte
	var actmd *activity.Metadata
  {{- range .Activities }}
  // Register {{.ImportPath}}
	SupportedImports["{{.ImportPath}}"] = true
  act, err = activities.Asset("{{.AssetName}}")
  if err != nil {
  	// Asset was not found.
    return err
  }
  actmd = activity.NewMetadata(string(act))
  activity.Register({{.PackageName}}.NewActivity(actmd))
  {{- end }}
	return nil
}
`))
